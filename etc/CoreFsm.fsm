/*
MIT License

Copyright (c) 2020 Andre Leiradella

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

header {
    #include <lrcpp/libretro.h>

    namespace lrcpp {
        struct Core;
        class Frontend;
    }

    typedef lrcpp::Core* CorePtr;
    typedef lrcpp::Frontend* FrontendPtr;
    typedef size_t* SizePtr;
    typedef char const* ConstCharPtr;
    typedef retro_game_info const* ConstRetroGameInfoPtr;
    typedef void* VoidPtr;
    typedef void const* ConstVoidPtr;
    typedef void** VoidPtrPtr;
    typedef unsigned* UnsignedPtr;
    typedef struct retro_system_info* RetroSystemInfoPtr;
    typedef struct retro_system_av_info* RetroSystemAvInfoPtr;
}

implementation {
    #include <lrcpp/CoreFsm.h>
    #include <lrcpp/Frontend.h>
}

fsm CoreFsm(CorePtr core, FrontendPtr frontend, FrontendPtr previous) {
    before {
        self->previous = lrcpp::Frontend::getCurrent();
        lrcpp::Frontend::setCurrent(self->frontend);
    }

    after {
        lrcpp::Frontend::setCurrent(self->previous);
        self->previous = nullptr;
    }

    Start {
        coreSet() => CoreSet;
    }

    CoreSet {
        apiVersion(UnsignedPtr version) => CoreSet {
            *version = self->core->apiVersion();
        }

        getSystemInfo(RetroSystemInfoPtr info) => CoreSet {
            self->core->getSystemInfo(info);
        }

        setEnvironment(retro_environment_t cb) => EnvironmentSet {
            self->core->setEnvironment(cb);
        }

        unset() => Start;
    }

    EnvironmentSet {
        apiVersion(UnsignedPtr version) => EnvironmentSet {
            *version = self->core->apiVersion();
        }

        getSystemInfo(RetroSystemInfoPtr info) => EnvironmentSet {
            self->core->getSystemInfo(info);
        }

        setControllerPortDevice(unsigned port, unsigned device) => EnvironmentSet {
            self->core->setControllerPortDevice(port, device);
        }

        init() => CoreInitialized {
            self->core->init();
        }

        gotoCoreSet() => CoreSet; // Only so that the state goes to CoreSet;

        unset() => gotoCoreSet() => unset();
    }

    CoreInitialized {
        apiVersion(UnsignedPtr version) => CoreInitialized {
            *version = self->core->apiVersion();
        }

        getSystemInfo(RetroSystemInfoPtr info) => CoreInitialized {
            self->core->getSystemInfo(info);
        }

        setControllerPortDevice(unsigned port, unsigned device) => CoreInitialized {
            self->core->setControllerPortDevice(port, device);
        }

        loadGame(ConstRetroGameInfoPtr gameInfo) => GameLoaded {
            if (!self->core->loadGame(gameInfo)) {
                forbid;
            }
        }

        loadGameSpecial(unsigned gameType, ConstRetroGameInfoPtr info, size_t numInfo) => GameLoaded {
            if (!self->core->loadGameSpecial(gameType, info, numInfo)) {
                forbid;
            }
        }

        deinit() => EnvironmentSet {
            self->core->deinit();
        }

        unset() => deinit() => unset();
    }

    GameLoaded {
        apiVersion(UnsignedPtr version) => GameLoaded {
            *version = self->core->apiVersion();
        }

        getSystemInfo(RetroSystemInfoPtr info) => GameLoaded {
            self->core->getSystemInfo(info);
        }

        setControllerPortDevice(unsigned port, unsigned device) => GameLoaded {
            self->core->setControllerPortDevice(port, device);
        }

        getSystemAvInfo(RetroSystemAvInfoPtr info) => GameLoaded {
            self->core->getSystemAvInfo(info);
        }

        setCallbacks(
            retro_video_refresh_t videoRefresh,
            retro_audio_sample_t audioSample,
            retro_audio_sample_batch_t audioSampleBatch,
            retro_input_poll_t inputPoll,
            retro_input_state_t inputState
        ) => GameRunning {
            self->core->setVideoRefresh(videoRefresh);
            self->core->setAudioSample(audioSample);
            self->core->setAudioSampleBatch(audioSampleBatch);
            self->core->setInputPoll(inputPoll);
            self->core->setInputState(inputState);
        }

        unloadGame() => CoreInitialized {
            self->core->unloadGame();
        }

        getRegion(UnsignedPtr region) => GameLoaded {
            *region = self->core->getRegion();
        }

        getMemoryData(unsigned id, VoidPtrPtr data) => GameLoaded {
            *data = self->core->getMemoryData(id);
        }

        getMemorySize(unsigned id, SizePtr size) => GameLoaded {
            *size = self->core->getMemorySize(id);
        }

        deinit() => unloadGame() => deinit();

        unset() => unloadGame() => unset();
    }
    
    GameRunning {
        apiVersion(UnsignedPtr version) => GameRunning {
            *version = self->core->apiVersion();
        }

        getSystemInfo(RetroSystemInfoPtr info) => GameRunning {
            self->core->getSystemInfo(info);
        }

        setControllerPortDevice(unsigned port, unsigned device) => GameRunning {
            self->core->setControllerPortDevice(port, device);
        }

        getSystemAvInfo(RetroSystemAvInfoPtr info) => GameRunning {
            self->core->getSystemAvInfo(info);
        }

        run() => GameRunning {
            self->core->run();
        }

        reset() => GameRunning {
            self->core->reset();
        }

        serializeSize(SizePtr size) => GameRunning {
            *size = self->core->serializeSize();
        }

        serialize(VoidPtr data, size_t size) => GameRunning {
            if (!self->core->serialize(data, size)) {
                forbid;
            }
        }

        unserialize(ConstVoidPtr data, size_t size) => GameRunning {
            if (!self->core->unserialize(data, size)) {
                forbid;
            }
        }

        cheatReset() => GameRunning {
            self->core->cheatReset();
        }

        cheatSet(unsigned index, bool enabled, ConstCharPtr code) => GameRunning {
            self->core->cheatSet(index, enabled, code);
        }

        getRegion(UnsignedPtr region) => GameRunning {
            *region = self->core->getRegion();
        }

        getMemoryData(unsigned id, VoidPtrPtr data) => GameRunning {
            *data = self->core->getMemoryData(id);
        }

        getMemorySize(unsigned id, SizePtr size) => GameRunning {
            *size = self->core->getMemorySize(id);
        }

        unloadGame() => CoreInitialized {
            self->core->unloadGame();
        }

        deinit() => unloadGame() => deinit();

        unset() => unloadGame() => unset();
    }
}
